{"version":3,"sources":["Detail.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["박스","styled","div","제목","h4","props","색상","React","Component","Info","재고","nbr","Detail","useState","스윗치","스윗치변경","useEffect","axios","get","타이머","setTimeout","clearTimeout","id","useParams","history","useHistory","shoes","find","arr","className","src","width","list","value","찾기","title","content","price","onClick","재고변경","goBack","Data1","tempurl","idx","toString","to","val","App","Data","shoes변경","로딩중","로딩중변경","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","NavDropdown","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","exact","path","Jumbotron","map","then","결과","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25a5784f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport './Detail.scss';\r\nimport axios from 'axios';\r\n\r\n//컴포넌트 만듬 스타일들 컴포넌트.. css를입혀놓은 컴포넌트 \r\nlet 박스 = styled.div`\r\n  padding : 20px;\r\n`;\r\nlet 제목 = styled.h4`\r\n  font-size :25px;\r\n  `;\r\nlet 제목2 = styled.h4`\r\n  font-size :25px;\r\n  color : ${props => props.색상};\r\n  `;\r\n\r\n\r\n// 컴포넌트가 등장전 혹은 퇴장전에 ㅇㅇ좀해주세요 \r\n// 이게 훅이다\r\n\r\nclass Detail2 extends React.Component {\r\n  //훅 디테일2 컴포넌트가 마운트 되었을때 실행할 코드\r\n  componentDidMount() {\r\n\r\n  }\r\n  // 컴포넌트가 사라질때 이걸실행해줘 훅\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction Detail(props) {\r\n\r\n  // UI만드는법 \r\n  // ui 보이고 / 안보이고 상태를 state로 저장\r\n  let [스윗치, 스윗치변경] = useState(true);\r\n\r\n  // 요즘쓰는훅 useEffect ,임포트 해와야됨 라이프사이클 훅과 같은 역할\r\n  // useEffect(() => {\r\n  //   console.log(111111111111)\r\n  // });\r\n\r\n  //해보기: 디테일 페이지 방문후 alert창이 2초후 사라지게 ?\r\n  //업데이트가 될때도 발동되므로 조심!\r\n\r\n\r\n  useEffect(() => {\r\n    // 방문했을때 서버에 요청해서 가져오고싶다\r\n    // 이럴떄 useEffect 씀\r\n    // 로드했을때만 ajax 요청하고싶다.그럼 useeffect끝에 []만 붙히면됨\\\r\n\r\n    axios.get('url주소 어쩌고')\r\n  }, []); // 디테일 페이지가 로드했을때만 실행\r\n\r\n\r\n  useEffect(() => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // console.log(132)\r\n    let 타이머 = setTimeout(() => {  //몇초후에 콜백함수를 실행해주세요 하는 자바스크립트 함수\r\n      스윗치변경(false)\r\n      //setTimeout같은경우는 오류유발이 잦으므로 항상 return(컴포넌트가 사라질때 발동) 을 이용해서 clearTimeout함수로 없애줘야됨\r\n      return () => { clearTimeout(타이머) }\r\n    }, 2000)// , 이후에 시간입력\r\n  }, [스윗치]); // 대괄호는 useeffect가실행될 조건임 스윗치 라고 적으면 스윗치라는 state가 변경될때만실행해줌\r\n  // 여러개 적은거 가능 [스윗치, 어쩌고 , 저저고]\r\n  // 아무거도 안적으면 영영 실행 안됨 즉 Detail등장시 한번 실행하고 끝남\r\n\r\n  // 셋타임함수는 보통 변수에다 저장해서 자주사용함 \r\n\r\n  // 위 코드는 디테일 컴포넌트가 표시될때\r\n  // return 을 쓰면 컴포넌트가 사라질떄(페이지 이동등) 작동\r\n  //정확히 말하면 언마운트될때 실행\r\n\r\n  //  useEffect(() => {\r\n  //   return function 어쩌구(){ 실행할코드 } 애로우펑션가능\r\n  // });\r\n\r\n  // 실행할게 많으면 두줄세줄 네줄 쓰던가 유즈이팩트를 두개세개 네개 써라 물론 적은 순서대로실행됨\r\n\r\n\r\n\r\n  // 이걸쓰면 아까 지정해둔 파라미터 사용가능 :id\\\r\n  // 디스트럭팅 문법을 이용해서 이런식으로 {}변수지정해주는거임 useParams는 {}형태를 반환하기 때문\r\n  let { id } = useParams();\r\n\r\n  let history = useHistory(); //방문기록 같은 히스토리가 담겨있음\r\n\r\n  let nbr = props.shoes.find((arr) => {\r\n    if (arr.id == id) {\r\n      return true;\r\n    }\r\n  }).id\r\n\r\n  function 찾기(list) {\r\n    for (var value of list) {\r\n      if (value.id == id) {\r\n        return value\r\n      } // 3, 5, 7\r\n    }\r\n  }\r\n\r\n  let [입력값, 입력값변경] = useState('');\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <박스>\r\n        {/* <제목2 색상=\"blue\" >Detail</제목2>\r\n        <제목2 색상=\"red\" >Detail</제목2> */}\r\n        {/* 색상 프롭스 전송 */}\r\n        <제목 className=\"red\">Detail</제목>\r\n      </박스>\r\n      {/* <알림 스위치={스윗치}> */}\r\n      {/* {}형태 내에선 if  이런거 안되서 삼항연산자를 씀*/}\r\n\r\n      {/* <input onChange={(e) => {\r\n        입력값변경(e.target.value)\r\n      }} /> */}\r\n      {/* 입력할떄마다 재랜더링 됨(업뎃됨) 그래서 useEffect도 실행 되버림 */}\r\n      {/* {입력값} */}\r\n\r\n      {\r\n        스윗치 === true\r\n          ? (<div className=\"my-alert\">\r\n            <p>재고가 얼마 남지 않았음</p>\r\n          </div>)\r\n          : null\r\n      }\r\n      {/* </알림> */}\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img src={\"https://codingapple1.github.io/shop/shoes\" + (nbr + 1) + \".jpg\"} width=\"100%\" />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{찾기(props.shoes).title}</h4>\r\n          <p>{props.shoes.find((arr) => {\r\n            if (arr.id == id) {\r\n              return true;\r\n            }\r\n          }).content}</p>\r\n          <p>{props.shoes.find((arr) => {\r\n            if (arr.id == id) {\r\n              return true;\r\n            }\r\n          }).price}원</p>\r\n\r\n          <Info\r\n            재고={props.재고}\r\n            nbr={nbr}\r\n          ></Info>\r\n          {/* 재고 컴포넌트로 만들거임 */}\r\n\r\n\r\n          <button onClick={() => {\r\n            let arr = [...props.재고]\r\n            arr[nbr] = arr[nbr] - 1\r\n            props.재고변경(arr)\r\n          }} className=\"btn btn-danger\">주문하기</button>\r\n          &nbsp;\r\n          <button className=\"btn btn-danger\" onClick={() => {\r\n            history.goBack();\r\n          }}>뒤로가기</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Info(props) {\r\n  return (\r\n    <p>재고 : {props.재고[props.nbr]}</p>\r\n    // 데이터바인딩 근데 3중 컴포넌트 데이터바인딩임\r\n\r\n  )\r\n}\r\n\r\nexport default Detail;\r\n","// var name11 = 'kim';\r\n// var name2 = 'prk';\r\n\r\n// export default name // 꼭한번만 가능\r\n// 변수가 너무 많다면?\r\nexport default [\r\n  {\r\n    id: 0,\r\n    title: \"White and Black\",\r\n    content: \"Born in France\",\r\n    price: 120000\r\n  },\r\n\r\n  {\r\n    id: 1,\r\n    title: \"Red Knit\",\r\n    content: \"Born in Seoul\",\r\n    price: 110000\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    title: \"Grey Yordan\",\r\n    content: \"Born in the States\",\r\n    price: 130000\r\n  }\r\n]","/* exlint disable */\nimport './App.css';\nimport { Button, Navbar, Container, Nav, NavDropdown, Jumbotron, Form, FormControl } from 'react-bootstrap';\nimport React, { useState } from 'react';\n// import 아무거나 from './data.js';\n//     이름       경로\n// 하지만 { ㅁ, ㅁ2} 이런형태인경우 저형태\n// 그대로 써줘야됨\n// import { name11, name2 } from './data.js';\n\nimport Detail from './Detail.js';\nimport Data from './data.js';\n\nimport axios from 'axios';\n\n//라우팅을 하고싶다\nimport { Link, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n\n  let [shoes, shoes변경] = useState(Data);\n  let [로딩중, 로딩중변경] = useState(false);\n  let [재고, 재고변경] = useState([10, 11, 12]);\n  // 중요한 state데이터는 상위컴포넌트에 저장하라!\n\n\n\n  return (\n    <div className=\"App\">\n      {/* {아무거나} 다른파일의 변수함수등 쓸수 있음*/}\n      {/* {name11}{name2} */}\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">ShoesShop</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n            {/* as 어쩌구는 링크태크처럼 써달라하는거임 */}\n            <Nav.Link ><Link to=\"/detail\">Detail</Link></Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-success\">Search</Button>\n          </Form>\n        </Navbar.Collapse>\n      </Navbar>\n      {/* <Jumbotron className=\"background\">\n        <h1>20% season off</h1>\n        <p>\n          This is a simple hero unit, a simple jumbotron-style component for calling\n          extra attention to featured content or information.\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron> */}\n      {/*  라우트 나눈거임  */}\n      <Switch>\n        <Route exact path=\"/\">\n          <div>\n            <Jumbotron className=\"background\">\n              <h1>20% season off</h1>\n              <p>\n                This is a simple hero unit, a simple jumbotron-style component for calling\n                extra attention to featured content or information.\n              </p>\n              <p>\n                <Button variant=\"primary\">Learn more</Button>\n              </p>\n            </Jumbotron>\n            <div className=\"container\">\n              <div className=\"row\">\n                {로딩중 === true\n                  ? <div>로딩중</div>\n                  : (\n                    shoes.map((val, idx) => {\n                      return (\n\n                        <Data1\n                          val={val}\n                          idx={idx + 1}\n                          key={idx}\n                        ></Data1>\n\n                      )\n                    }))\n                }\n                {/* 반복문은 필수 컴포넌트는 선택사항 */}\n\n              </div>\n              <button onClick={() => {\n\n                // axios.post('서버url', { id: 'asdfasdf', pw:'asdff'}).then();\n                // 서버url 에 뒷부분 {}를 post요청으로 전달함 \n\n                // fetch('https://codingapple1.github.io/shop/data2.json').then() fetch함수는 일케씀\n\n                로딩중변경(true);\n\n                axios.get('https://codingapple1.github.io/shop/data2.json').then((결과) => { // 결과는 요청후 성공결과물을 다 담고있음 내용물, 성공한이유등등.. \n                  로딩중변경(false);\n                  // console.log(결과.data)\n                  // let arr = [...shoes]\n                  // arr.push(...결과.data)\n                  // shoes변경([arr])\n                  shoes변경([...shoes, ...결과.data]) //대괄호를 벗기고 그내용을 복사해서 그대로 넣음 완전 복사된 새로운 데이터임 스킬\n                })\n                  .catch(() => {\n                    로딩중변경(false);\n                    // 로딩중이라는 ui제거\n                  }); // 새로고침 없이도 데이터를 가져옴 .then (성공했을때 실행할 코드) .catch(실패했을때)\n\n                // axios 는 json가져와도 object 로 바궈주는데 \n                // fetch는 안바꿔줘서 직접 바꿔줘야됨\n\n              }} className=\"btn btn-primary\">더보기</button>\n            </div>\n          </div>\n        </Route>\n\n        {/* url파라미터 :id , 작명하는 부분일뿐 콜론뒤엔 아무이름 가능, 여러개 가능 /asdf/:id/:id */}\n        <Route path=\"/detail/:id\"> {/*이건 매칭되는건 다보여줌 즉 / 이기도하고 /detail 이기도 해서 메인페이지에여 랑 디테일 페이지에여를 보여주는것임 그래서 exact를 넣어주면 정확히 그것일때만 보여줌*/}\n          <Detail\n            shoes={shoes}\n            재고={재고}\n            재고변경={재고변경}\n          />\n\n          {/* <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n            </div>\n            <div className=\"col-md-6 mt-4\">\n              <h4 className=\"pt-5\">상품명</h4>\n              <p>상품설명</p>\n              <p>120000원</p>\n              <button className=\"btn btn-danger\">주문하기</button>\n            </div>\n          </div>\n        </div> */}\n        </Route> {/* 모듈화 */}\n        {/* <Route path=\"/asdf\" component={Modal}></Route> 이건 컴포넌트를 바로 보여줌 */}\n\n\n\n        {/* 주소뒤에 아무문자나 적었을때 여기로 보내달라 란뜻 */}\n        {/* <Route path=\"/:id\">\n          <div>\n            아무거나저겄을떄 이걸보여줌\n          </div>\n\n        </Route> */}\n\n      </Switch>\n      {/* 스위치는 중복을 허용치않게됨 광역 exact 느낌 */}\n\n\n\n      {/* <div className=\"container\">\n        <div className=\"row\">\n          {\n            shoes.map((val, idx) => {\n              return (\n\n                <Data1\n                  val={val}\n                  idx={idx + 1}\n                  key={idx}\n                ></Data1>\n\n              )\n            })}\n         - 반복문은 필수 컴포넌트는 선택사항 \n\n        </div>\n      </div> */}\n    </div >\n\n\n  );\n}\n// 컴포넌트로 만들기 & 데이터바인딩\nfunction Data1(props) {\n\n  let tempurl = \"https://codingapple1.github.io/shop/shoes\" + props.idx.toString() + \".jpg\";\n\n  return (\n    <Link to={\"/detail/\" + props.val.id} className=\"col-md-4\">\n      <img src={tempurl} width=\"100%\" />\n      <h4>{props.val.title}</h4>\n      <p>{props.val.content}</p>\n    </Link>\n\n\n  )\n}\n\n// 디테일 페이지 라우팅용 컴포넌트\n// function Detail() {\n//   return (\n//     <div className=\"container\">\n//       <div className=\"row\">\n//         <div className=\"col-md-6\">\n//           <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\n//         </div>\n//         <div className=\"col-md-6 mt-4\">\n//           <h4 className=\"pt-5\">상품명</h4>\n//           <p>상품설명</p>\n//           <p>120000원</p>\n//           <button className=\"btn btn-danger\">주문하기</button>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n// 경로에 ./ 없이 이름만 있다 그럼보통 라이브러리다\n// 라우터는 /abc 에접속하면 ㅁㅁ페이지 /ccc 에 접속하면 ㄴㄴ 페이지 보여줌\n\n// 해시 라우터 : 조금더 라우팅을 안전하게 해줌 서버와의 통신과 안헷갈리게 함 (서버에게 요청하지 않게 하기위해서)\n// import { HashRouter } from 'react-router-dom';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}